#!/usr/bin/env ruby

require "rubygems"
require "json"
require "optparse"
require "net/http"
require "uri"



def nagios_result(check_result)
  case check_result
    when 0
      puts "OK"
      exit 0
    when 1
      puts "WARNING"
      exit 1
    when 2
      puts "CRITICAL"
      exit 2
    else
      puts "UNKNOWN"
      exit 3
    end
end

def valid_result(instance_name)
  case instance_name
    when "admin"
      # puts "admin needs one"
      return 1
    when "ep-live"
      # puts "ep-live needs two"
      return 2
    when "ep-preview"
      #puts "ep-preview needs one"
      return 1
    when "live"
      #puts "live needs two"
      return 2
    when "preview"
      # puts "preview needs two"
      return 1
    when "bogus"
      # puts "this is for testing this plugin"
      return 1
    else
      #puts "oops- we dont know a valid number for this instance- check your syntax"
    return 0
  end
end

def get_endpoint_json(data)
  #p "----------------------------------"
  #pp data.count
  #if data.each do | this_element |
  #    p "this element"
  #    p this_element
  #  end
  #end

  
  #p "----------------------------------"
  return data
end

def get_admin_json(data)
  #p "-------------------admin---------------"
  #pp data.count
  #p data.class
  #p "--------------admin--------------------"
  return data
end


# This hash will hold all of the options
 # parsed from the command-line by
 # OptionParser.
 options = {}
 
 optparse = OptionParser.new do|opts|
   # Set a banner, displayed at the top
   # of the help screen.
   opts.banner = "Usage: check_json.rb -u status_url -e endpoint"
 
   # Define the options, and what they do
   options[:statusurl] = ""
   opts.on( '-u','--url STATUSURL' 'Status URL' ) do|this_status_url| 
     options[:statusurl] = this_status_url
   end
   # Define the options, and what they do
   options[:endpoint] = ""
   opts.on( '-e','--endpoint (ep-live|ep-preview|admin|live|preview)' 'Endpoint' ) do|this_endpoint| 
     options[:endpoint] = this_endpoint
   end
 
   # This displays the help screen, all programs are
   # assumed to have this option.
   opts.on( '-h', '--help', 'Display this screen' ) do
     puts opts
     exit
   end
 end

optparse.parse!

# display the options we were given
# pp "Options:", options

# get the response
uri = URI.parse( options[:statusurl] )
http = Net::HTTP.new(uri.host, uri.port)
request = Net::HTTP::Get.new(uri.request_uri)
response = http.request(request)

# what is a valid number of elements for this endpoint
valid_number = valid_result(options[:endpoint])

# valid response
if response.code == "200"
  result = JSON.parse(response.body)
else
  return nagios_result(3)
  exit
end

if result.has_key?("servers")
  if  result["servers"][options[:endpoint]].nil?
    return nagios_result(3)
    exit 
  else
    case options[:endpoint] 
      when "ep-live"
        json2check = get_endpoint_json(result["servers"][options[:endpoint]]["awe.service.AweModule"])
      when "ep-preview"
        json2check = get_endpoint_json(result["servers"][options[:endpoint]]["awe.service.AweModule"])
      when "admin"
        json2check = get_admin_json(result["servers"][options[:endpoint]]["awe.service.AweModule"])
    end
  end
end

#p number_elements
#p valid_number

if json2check.count == valid_result(options[:endpoint])
  return nagios_result(0)
  exit
end
if json2check.count == 0
  return nagios_result(2)
  exit
end
if json2check.count < valid_result(options[:endpoint])
  return nagios_result(1)
  exit
end

# ensure we have a valid response
return nagios_result(3)
exit
